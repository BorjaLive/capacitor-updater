package ee.forgr.capacitor_updater;

import android.content.SharedPreferences;
import android.util.Log;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.getcapacitor.plugin.WebView;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.security.SecureRandom;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

interface Callback {
    void callback(JSONObject jsonObject);
}

public class CapacitorUpdater {
    private static final String AB = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    private static final SecureRandom rnd = new SecureRandom();

    private static final String INFO_SUFFIX = "_info";

    private static final String FALLBACK_VERSION = "pastVersion";
    private static final String NEXT_VERSION = "nextVersion";
    private static final String bundleDirectory = "versions";

    public static final String TAG = "Capacitor-updater";
    public static final String pluginVersion = "4.0.0";

    public SharedPreferences.Editor editor;
    public SharedPreferences prefs;

    public RequestQueue requestQueue;

    public File documentsDir;
    public String versionBuild = "";
    public String versionCode = "";
    public String versionOs = "";

    public String statsUrl = "";
    public String appId = "";
    public String deviceID = "";

    private final FilenameFilter filter = new FilenameFilter() {
        @Override
        public boolean accept(final File f, final String name) {
            // ignore directories generated by mac os x
            return !name.startsWith("__MACOSX") && !name.startsWith(".") && !name.startsWith(".DS_Store");
        }
    };

    private int calcTotalPercent(final int percent, final int min, final int max) {
        return (percent * (max - min)) / 100 + min;
    }

    void notifyDownload(final String folder, final int percent) {
        return;
    }

    private String randomString(final int len){
        final StringBuilder sb = new StringBuilder(len);
        for(int i = 0; i < len; i++)
            sb.append(AB.charAt(rnd.nextInt(AB.length())));
        return sb.toString();
    }

    private File unzip(final String folder, final File zipFile, final String dest) throws IOException {
        final File targetDirectory = new File(this.documentsDir, dest);
        final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(zipFile)));
        try {
            int count;
            final int bufferSize = 8192;
            final byte[] buffer = new byte[bufferSize];
            final long lengthTotal = zipFile.length();
            long lengthRead = bufferSize;
            int percent = 0;
            this.notifyDownload(folder, 75);

            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                final File file = new File(targetDirectory, entry.getName());
                final String canonicalPath = file.getCanonicalPath();
                final String canonicalDir = (new File(String.valueOf(targetDirectory))).getCanonicalPath();
                final File dir = entry.isDirectory() ? file : file.getParentFile();

                if (!canonicalPath.startsWith(canonicalDir)) {
                    throw new FileNotFoundException("SecurityException, Failed to ensure directory is the start path : " +
                            canonicalDir + " of " + canonicalPath);
                }

                if (!dir.isDirectory() && !dir.mkdirs()) {
                    throw new FileNotFoundException("Failed to ensure directory: " +
                            dir.getAbsolutePath());
                }

                if (entry.isDirectory()) {
                    continue;
                }

                try(final FileOutputStream outputStream = new FileOutputStream(file)) {
                    while ((count = zis.read(buffer)) != -1)
                        outputStream.write(buffer, 0, count);
                }

                final int newPercent = (int)((lengthRead * 100) / lengthTotal);
                if (lengthTotal > 1 && newPercent != percent) {
                    percent = newPercent;
                    this.notifyDownload(folder, this.calcTotalPercent(percent, 75, 90));
                }

                lengthRead += entry.getCompressedSize();
            }
            return targetDirectory;
        } finally {
            try {
                zis.close();
            } catch (final IOException e) {
                Log.e(TAG, "Failed to close zip input stream", e);
            }
        }
    }

    private void flattenAssets(final File sourceFile, final String dest) throws IOException {
        if (!sourceFile.exists()) {
            throw new FileNotFoundException("Source file not found: " + sourceFile.getPath());
        }
        final File destinationFile = new File(this.documentsDir, dest);
        destinationFile.getParentFile().mkdirs();
        final String[] entries = sourceFile.list(this.filter);
        if (entries == null || entries.length == 0) {
            throw new IOException("Source file was not a directory or was empty: " + sourceFile.getPath());
        }
        if (entries.length == 1 && !"index.html".equals(entries[0])) {
            final File child = new File(sourceFile, entries[0]);
            child.renameTo(destinationFile);
        } else {
            sourceFile.renameTo(destinationFile);
        }
        sourceFile.delete();
    }

    private File downloadFile(final String folder, final String url, final String dest) throws IOException {

        final URL u = new URL(url);
        final URLConnection connection = u.openConnection();
        final InputStream is = u.openStream();
        final DataInputStream dis = new DataInputStream(is);

        final File target = new File(this.documentsDir, dest);
        target.getParentFile().mkdirs();
        target.createNewFile();
        final FileOutputStream fos = new FileOutputStream(target);

        final long totalLength = connection.getContentLength();
        final int bufferSize = 1024;
        final byte[] buffer = new byte[bufferSize];
        int length;

        int bytesRead = bufferSize;
        int percent = 0;
        this.notifyDownload(folder, 10);
        while ((length = dis.read(buffer))>0) {
            fos.write(buffer, 0, length);
            final int newPercent = (int)((bytesRead * 100) / totalLength);
            if (totalLength > 1 && newPercent != percent) {
                percent = newPercent;
                this.notifyDownload(folder, this.calcTotalPercent(percent, 10, 70));
            }
            bytesRead += length;
        }
        return target;
    }

    private void deleteDirectory(final File file) throws IOException {
        if (file.isDirectory()) {
            final File[] entries = file.listFiles();
            if (entries != null) {
                for (final File entry : entries) {
                    this.deleteDirectory(entry);
                }
            }
        }
        if (!file.delete()) {
            throw new IOException("Failed to delete: " + file);
        }
    }

    private void setCurrentBundle(final File bundle) {
        this.editor.putString(WebView.CAP_SERVER_PATH, bundle.getPath());
        Log.i(TAG, "Current bundle set to: " + bundle);
        this.editor.commit();
    }

    public VersionInfo download(final String url, final String versionName) throws IOException {
        final String folder = this.randomString(10);
        this.saveVersionInfo(folder, new VersionInfo(folder, versionName, VersionStatus.DOWNLOADING, new Date(System.currentTimeMillis())));
        this.notifyDownload(folder, 0);
        final String path = this.randomString(10);
        final File zipFile = new File(this.documentsDir, path);
        final String folderNameUnZip = this.randomString(10);
        final String folderName = bundleDirectory + "/" + folder;
        this.notifyDownload(folder, 5);
        final File downloaded = this.downloadFile(folder, url, path);
        this.notifyDownload(folder, 71);
        final File unzipped = this.unzip(folder, downloaded, folderNameUnZip);
        zipFile.delete();
        this.notifyDownload(folder, 91);
        this.flattenAssets(unzipped, folderName);
        this.notifyDownload(folder, 100);
        this.saveVersionInfo(folder, null);
        VersionInfo info = new VersionInfo(folder, versionName, VersionStatus.PENDING, new Date(System.currentTimeMillis()));
        this.saveVersionInfo(folder, info);
        return info;
    }

    public List<VersionInfo> list() {
        final List<VersionInfo> res = new ArrayList<>();
        final File destHot = new File(this.documentsDir, bundleDirectory);
        Log.d(TAG, "list File : " + destHot.getPath());
        if (destHot.exists()) {
            for (final File i : destHot.listFiles()) {
                final String folder = i.getName();
                res.add(this.getVersionInfo(folder));
            }
        } else {
            Log.i(TAG, "No versions available to list" + destHot);
        }
        return res;
    }

    public Boolean delete(final String folder) throws IOException {
        final VersionInfo deleted = this.getVersionInfo(folder);
        final File bundle = new File(this.documentsDir, bundleDirectory + "/" + folder);
        if (bundle.exists()) {
            this.deleteDirectory(bundle);
            this.removeVersionInfo(folder);
            return true;
        }
        Log.e(TAG, "Directory not removed: " + bundle.getPath());
        this.sendStats("delete", deleted);
        return false;
    }

    private File getBundleDirectory(final String folder) {
        return new File(this.documentsDir, bundleDirectory + "/" + folder);
    }

    private boolean bundleExists(final File bundle) {
        if(bundle == null || !bundle.exists()) {
            return false;
        }

        return new File(bundle.getPath(), "/index.html").exists();
    }

    public Boolean set(final VersionInfo version) {
        return this.set(version.getFolder());
    }

    public Boolean set(final String folder) {

        final VersionInfo existing = this.getVersionInfo(folder);
        final File bundle = this.getBundleDirectory(folder);

        Log.i(TAG, "Setting next active bundle: " + existing);
        if (this.bundleExists(bundle)) {
            this.setCurrentBundle(bundle);
            this.setVersionStatus(folder, VersionStatus.PENDING);
            this.sendStats("set", existing);
            return true;
        }
        this.sendStats("set_fail", existing);
        return false;
    }

    public void commit(final VersionInfo version) {
        this.setVersionStatus(version.getVersionName(), VersionStatus.SUCCESS);
        this.setFallbackVersion(version);
    }

    public void reset() {
        this.reset(false);
    }

    public void rollback(final VersionInfo version) {
        this.setVersionStatus(version.getVersionName(), VersionStatus.ERROR);
    }

    public void reset(final boolean internal) {
        this.setCurrentBundle(new File("public"));
        this.setFallbackVersion(null);
        this.setNextVersion(null);
        if(!internal) {
            this.sendStats("reset", this.getCurrentBundle());
        }
    }

    public void getLatest(final String url, final Callback callback) {
        final String deviceID = this.deviceID;
        final String appId = this.appId;
        final String versionBuild = this.versionBuild;
        final String versionCode = this.versionCode;
        final String versionOs = this.versionOs;
        final String pluginVersion = CapacitorUpdater.pluginVersion;
        final String versionName = this.getCurrentBundle().getFolder();
        final StringRequest stringRequest = new StringRequest(Request.Method.GET, url,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(final String response) {
                        try {
                            final JSONObject jsonObject = new JSONObject(response);
                            callback.callback(jsonObject);
                        } catch (final JSONException e) {
                            Log.e(TAG, "Error parsing JSON", e);
                        }
                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(final VolleyError error) {
                Log.e(TAG, "Error getting Latest" +  error);
            }
        }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                final Map<String, String>  params = new HashMap<String, String>();
                params.put("cap_platform", "android");
                params.put("cap_device_id", deviceID);
                params.put("cap_app_id", appId);
                params.put("cap_version_build", versionBuild);
                params.put("cap_version_code", versionCode);
                params.put("cap_version_os", versionOs);
                params.put("cap_version_name", versionName);
                params.put("cap_plugin_version", pluginVersion);
                return params;
            }
        };
        this.requestQueue.add(stringRequest);
    }

    public void sendStats(final String action, final VersionInfo version) {
        String statsUrl = this.statsUrl;
        if (statsUrl == null || "".equals(statsUrl) || statsUrl.length() == 0) { return; }
        final URL url;
        final JSONObject json = new JSONObject();
        final String jsonString;
        try {
            url = new URL(statsUrl);
            json.put("platform", "android");
            json.put("action", action);
            json.put("version_name", version.getVersionName());
            json.put("device_id", this.deviceID);
            json.put("version_build", this.versionBuild);
            json.put("version_code", this.versionCode);
            json.put("version_os", this.versionOs);
            json.put("plugin_version", pluginVersion);
            json.put("app_id", this.appId);
            jsonString = json.toString();
        } catch (final Exception ex) {
            Log.e(TAG, "Error get stats", ex);
            return;
        }
        new Thread(new Runnable(){
            @Override
            public void run() {
                HttpURLConnection con = null;
                try {
                    con = (HttpURLConnection) url.openConnection();
                    con.setRequestMethod("POST");
                    con.setRequestProperty("Content-Type", "application/json");
                    con.setRequestProperty("Accept", "application/json");
                    con.setRequestProperty("Content-Length", Integer.toString(jsonString.getBytes().length));
                    con.setDoOutput(true);
                    con.setConnectTimeout(500);
                    final DataOutputStream wr = new DataOutputStream (con.getOutputStream());
                    wr.writeBytes(jsonString);
                    wr.close();
                    final int responseCode = con.getResponseCode();
                    if (responseCode != 200) {
                        Log.e(TAG, "Stats error responseCode: " + responseCode);
                    } else {
                        Log.i(TAG, "Stats send for \"" + action + "\", version " + version);
                    }
                } catch (final Exception ex) {
                    Log.e(TAG, "Error post stats", ex);
                } finally {
                    if (con != null) {
                        con.disconnect();
                    }
                }
            }
        }).start();
    }

    public VersionInfo getVersionInfo(String folder) {
        if(folder == null) {
            folder = VersionInfo.VERSION_UNKNOWN;
        }
        Log.d(TAG, "Getting info for [" + folder + "]");
        VersionInfo result;
        if(VersionInfo.VERSION_BUILTIN.equals(folder)) {
            result = new VersionInfo(folder, (String) null, VersionStatus.SUCCESS, "");
        } else {
            try {
                String stored = this.prefs.getString(folder + INFO_SUFFIX, "");
                result = VersionInfo.fromJSON(stored);
            } catch (JSONException e) {
                Log.e(TAG, "Failed to parse folder info for [" + folder + "] ", e);
                result = new VersionInfo(folder, (String) null, VersionStatus.PENDING, "");
            }
        }

        Log.d(TAG, "Returning info [" + folder + "] " + result);
        return result;
    }

    public VersionInfo getVersionInfoByName(final String version) {
        final List<VersionInfo> installed = this.list();
        for(final VersionInfo i : installed) {
            if(i.getFolder().equals(version)) {
                return i;
            }
        }
        return null;
    }

    private void removeVersionInfo(final String folder) {
        this.saveVersionInfo(folder, null);
    }

    private void saveVersionInfo(final String folder, final VersionInfo info) {
        if(folder == null || (info != null && (info.isBuiltin() || info.isUnknown()))) {
            Log.d(TAG, "Not saving info for folder: [" + folder + "] " + info);
            return;
        }

        if(info == null) {
            Log.d(TAG, "Removing info for folder [" + folder + "]");
            this.editor.remove(folder + INFO_SUFFIX);
        } else {
            final VersionInfo update = info.setFolder(folder);
            Log.d(TAG, "Storing info for folder [" + folder + "] " + update.toString());
            this.editor.putString(folder + INFO_SUFFIX, update.toString());
        }
        this.editor.commit();
    }

    public void setVersionName(final String folder, final String name) {
        if(folder != null) {
            Log.d(TAG, "Setting name for folder [" + folder + "] to " + name);
            VersionInfo info = this.getVersionInfo(folder);
            this.saveVersionInfo(folder, info.setVersionName(name));
        }
    }

    private void setVersionStatus(final String folder, final VersionStatus status) {
        if(folder != null && status != null) {
            VersionInfo info = this.getVersionInfo(folder);
            Log.d(TAG, "Setting status for [" + folder + "] to " + status);
            this.saveVersionInfo(folder, info.setStatus(status));
        }
    }

    private String getCurrentBundleFolder() {
        if(this.isUsingBuiltin()) {
            return VersionInfo.VERSION_BUILTIN;
        } else {
            final String path = this.getCurrentBundlePath();
            return path.substring(path.lastIndexOf('/') + 1);
        }
    }

    public VersionInfo getCurrentBundle() {
        return this.getVersionInfo(this.getCurrentBundleFolder());
    }

    public String getCurrentBundlePath() {
        return this.prefs.getString(WebView.CAP_SERVER_PATH, "public");
    }

    public Boolean isUsingBuiltin() {
        return this.getCurrentBundlePath().equals("public");
    }

    public VersionInfo getFallbackVersion() {
        final String folder = this.prefs.getString(FALLBACK_VERSION, VersionInfo.VERSION_BUILTIN);
        return this.getVersionInfo(folder);
    }

    private void setFallbackVersion(final VersionInfo fallback) {
        this.editor.putString(FALLBACK_VERSION,
                fallback == null
                        ? VersionInfo.VERSION_BUILTIN
                        : fallback.getVersionName()
        );
    }

    public VersionInfo getNextVersion() {
        final String folder = this.prefs.getString(NEXT_VERSION, "");
        if(folder != "") {
            return this.getVersionInfo(folder);
        } else {
            return null;
        }
    }

    public boolean setNextVersion(final String next) {
        if (next == null) {
            this.editor.remove(NEXT_VERSION);
        } else {
            final File bundle = this.getBundleDirectory(next);
            if (!this.bundleExists(bundle)) {
                return false;
            }

            this.editor.putString(NEXT_VERSION, next);
            this.setVersionStatus(next, VersionStatus.PENDING);
        }
        this.editor.commit();
        return true;
    }

}
